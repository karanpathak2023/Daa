#include <stdio.h>
#include <stdlib.h>

// Swap function
void swap(int *a, int *b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}

// Partition function
int partition(int arr[], int low, int high) {
    int pivot = arr[high];
    int i = low;

    for (int j = low; j < high; j++) {
        if (arr[j] <= pivot) {
            swap(&arr[i], &arr[j]);
            i++;
        }
    }
    swap(&arr[i], &arr[high]);
    return i;
}

// Quickselect function
int quickselect(int arr[], int low, int high, int k) {
    if (low <= high) {
        int pi = partition(arr, low, high);

        // Check if pivot position matches k
        if (pi == k)
            return arr[pi];
        else if (pi < k)
            return quickselect(arr, pi + 1, high, k); // Search in the right subarray
        else
            return quickselect(arr, low, pi - 1, k); // Search in the left subarray
    }
    return -1; // If the K-th element is not present
}

int main() {
    int T;
    printf("Enter the number of test cases: ");
    scanf("%d", &T);

    for (int t = 0; t < T; t++) {
        int n, k;
        printf("Enter the size of array: ");
        scanf("%d", &n);

        int arr[n];
        printf("Enter the elements of the array: ");
        for (int i = 0; i < n; i++) {
            scanf("%d", &arr[i]);
        }

        printf("Enter the value of K: ");
        scanf("%d", &k);

        if (k < 1 || k > n) {
            printf("not present\n");
        } else {
            int kth_smallest = quickselect(arr, 0, n - 1, k - 1); // Adjusting for 0-based index
            printf("%d\n", kth_smallest);
        }
    }

    return 0;
}
