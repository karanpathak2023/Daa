#include <stdio.h>

// Function to find the first occurrence of the key
int find_first_occurrence(int arr[], int size, int key) {
    int low = 0, high = size - 1, result = -1;

    while (low <= high) {
        int mid = low + (high - low) / 2;
        if (arr[mid] == key) {
            result = mid;
            high = mid - 1; // Search in the left half
        } else if (arr[mid] < key) {
            low = mid + 1;
        } else {
            high = mid - 1;
        }
    }

    return result;
}

// Function to find the last occurrence of the key
int find_last_occurrence(int arr[], int size, int key) {
    int low = 0, high = size - 1, result = -1;

    while (low <= high) {
        int mid = low + (high - low) / 2;
        if (arr[mid] == key) {
            result = mid;
            low = mid + 1; // Search in the right half
        } else if (arr[mid] < key) {
            low = mid + 1;
        } else {
            high = mid - 1;
        }
    }

    return result;
}

// Function to find the presence and count of the key
void find_key(int arr[], int size, int key, int *comparisons) {
    *comparisons = 0;

    int first_occurrence = find_first_occurrence(arr, size, key);
    (*comparisons)++;

    if (first_occurrence == -1) {
        printf("Not Present with %d comparisons\n", *comparisons);
        return;
    }

    int last_occurrence = find_last_occurrence(arr, size, key);
    (*comparisons)++;
    
    int count = last_occurrence - first_occurrence + 1;
    printf("Present with %d copies and %d comparisons\n", count, *comparisons);
}

int main() {
    int T;
    printf("Enter the number of test cases: ");
    scanf("%d", &T);

    for (int t = 0; t < T; t++) {
        int n, key;
        printf("Enter the size of array: ");
        scanf("%d", &n);

        int arr[n];
        printf("Enter the elements of the array: ");
        for (int i = 0; i < n; i++) {
            scanf("%d", &arr[i]);
        }

        printf("Enter the key element to search: ");
        scanf("%d", &key);

        int comparisons = 0;
        find_key(arr, n, key, &comparisons);
    }

    return 0;
}
