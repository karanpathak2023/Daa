#include <stdio.h>

// Function to perform insertion sort
void insertion_sort(int arr[], int size, int *comparisons, int *shifts) {
    *comparisons = 0;
    *shifts = 0;
    
    for (int i = 1; i < size; i++) {
        int key = arr[i];
        int j = i - 1;

        // Shift elements of the array that are greater than key
        while (j >= 0 && arr[j] > key) {
            (*comparisons)++;
            arr[j + 1] = arr[j];
            j--;
            (*shifts)++;
        }
        (*comparisons)++;  // For the last failed comparison
        arr[j + 1] = key;
        (*shifts)++;       // For placing the key in the correct position
    }
}

int main() {
    int T;
    printf("Enter the number of test cases: ");
    scanf("%d", &T);

    for (int t = 0; t < T; t++) {
        int n;
        printf("Enter the size of array: ");
        scanf("%d", &n);

        int arr[n];
        printf("Enter the elements of the array: ");
        for (int i = 0; i < n; i++) {
            scanf("%d", &arr[i]);
        }

        int comparisons = 0, shifts = 0;
        insertion_sort(arr, n, &comparisons, &shifts);

        // Print the sorted array
        printf("Sorted array: ");
        for (int i = 0; i < n; i++) {
            printf("%d ", arr[i]);
        }
        printf("\n");

        // Print the total comparisons and shifts
        printf("Comparisons = %d\n", comparisons);
        printf("Shifts = %d\n", shifts);
    }

    return 0;
}
